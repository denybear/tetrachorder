#include "synth.hpp"

namespace synth {

  uint32_t prng_xorshift_state = 0x32B71700;

  uint32_t prng_xorshift_next() {
    uint32_t x = prng_xorshift_state;
    x ^= x << 13;
    x ^= x >> 17;
    x ^= x << 5;
    prng_xorshift_state = x;
    return x;
  }

  int32_t prng_normal() {
    // rough approximation of a normal distribution
    uint32_t r0 = prng_xorshift_next();
    uint32_t r1 = prng_xorshift_next();
    uint32_t n = ((r0 & 0xffff) + (r1 & 0xffff) + (r0 >> 16) + (r1 >> 16)) / 2;
    return n - 0xffff;
  }

  uint16_t volume = 0xffff;
  const int16_t sine_waveform [256] = {-32768,-32758,-32729,-32679,-32610,-32522,-32413,-32286,-32138,-31972,-31786,-31581,-31357,-31114,-30853,-30572,-30274,-29957,-29622,-29269,-28899,-28511,-28106,-27684,-27246,-26791,-26320,-25833,-25330,-24812,-24279,-23732,-23170,-22595,-22006,-21403,-20788,-20160,-19520,-18868,-18205,-17531,-16846,-16151,-15447,-14733,-14010,-13279,-12540,-11793,-11039,-10279,-9512,-8740,-7962,-7180,-6393,-5602,-4808,-4011,-3212,-2411,-1608,-804,0,804,1608,2411,3212,4011,4808,5602,6393,7180,7962,8740,9512,10279,11039,11793,12540,13279,14010,14733,15447,16151,16846,17531,18205,18868,19520,20160,20788,21403,22006,22595,23170,23732,24279,24812,25330,25833,26320,26791,27246,27684,28106,28511,28899,29269,29622,29957,30274,30572,30853,31114,31357,31581,31786,31972,32138,32286,32413,32522,32610,32679,32729,32758,32767,32758,32729,32679,32610,32522,32413,32286,32138,31972,31786,31581,31357,31114,30853,30572,30274,29957,29622,29269,28899,28511,28106,27684,27246,26791,26320,25833,25330,24812,24279,23732,23170,22595,22006,21403,20788,20160,19520,18868,18205,17531,16846,16151,15447,14733,14010,13279,12540,11793,11039,10279,9512,8740,7962,7180,6393,5602,4808,4011,3212,2411,1608,804,0,-804,-1608,-2411,-3212,-4011,-4808,-5602,-6393,-7180,-7962,-8740,-9512,-10279,-11039,-11793,-12540,-13279,-14010,-14733,-15447,-16151,-16846,-17531,-18205,-18868,-19520,-20160,-20788,-21403,-22006,-22595,-23170,-23732,-24279,-24812,-25330,-25833,-26320,-26791,-27246,-27684,-28106,-28511,-28899,-29269,-29622,-29957,-30274,-30572,-30853,-31114,-31357,-31581,-31786,-31972,-32138,-32286,-32413,-32522,-32610,-32679,-32729,-32758};
  const int16_t violin_waveform [256] = {-3066,-1662,-345,917,2135,3301,4409,5504,6500,7490,8429,9308,10123,10899,11600,12250,12843,13370,13808,14187,14480,14674,14777,14774,14678,14511,14257,13905,13403,12702,11749,10440,8818,7175,5863,4896,4236,3760,3439,3245,3236,3459,3927,4684,5738,7125,8854,10954,13412,16149,19094,22071,24930,27487,29595,31181,32229,32741,32767,32291,31329,29904,28072,25916,23469,20861,18166,15449,12774,10268,7938,5821,3948,2362,1048,13,-738,-1208,-1405,-1403,-1234,-866,-273,587,1739,3221,4992,7006,9050,10995,12642,14020,15064,15803,16301,16582,16672,16574,16275,15766,15051,14100,12918,11527,9886,7989,5900,3604,1117,-1505,-4237,-7050,-9874,-12676,-15425,-18054,-20502,-22750,-24813,-26645,-28239,-29572,-30683,-31541,-32168,-32579,-32767,-32766,-32661,-32449,-32097,-31619,-30926,-30063,-28917,-27574,-25971,-24297,-22733,-21381,-20353,-19634,-19174,-18938,-18877,-18973,-19192,-19525,-19938,-20454,-20995,-21615,-22253,-22953,-23645,-24350,-25056,-25784,-26462,-27111,-27746,-28304,-28823,-29282,-29632,-29898,-29987,-29788,-29310,-28579,-27623,-26471,-25201,-23856,-22471,-21077,-19665,-18319,-17025,-15795,-14604,-13493,-12467,-11496,-10583,-9759,-8968,-8264,-7595,-7010,-6460,-5967,-5530,-5127,-4778,-4478,-4211,-3991,-3803,-3650,-3537,-3461,-3416,-3399,-3409,-3456,-3575,-3807,-4089,-4202,-4175,-3954,-3644,-3379,-3183,-3059,-2970,-2941,-3094,-3525,-3994,-4335,-4543,-4651,-4693,-4688,-4669,-4632,-4577,-4496,-4384,-4222,-4018,-3822,-3707,-3663,-3659,-3682,-3750,-3875,-4077,-4344,-4728,-5152,-5589,-5941,-6126,-6184,-6111,-5942,-5693,-5361,-4984,-4586,-4113,-3620};
  const int16_t reed_waveform [256] = {-1080,-695,-340,0,328,651,957,1264,1555,1840,2117,2385,2640,2899,3144,3374,3606,3838,4070,4285,4483,4697,4894,5089,5267,5458,5632,5804,5974,6126,6291,6438,6583,6725,6865,7001,7134,7251,7366,7489,7597,7702,7803,7901,7985,8077,8164,8241,8333,8432,8549,8673,8807,8948,9098,9269,9461,9663,9875,10097,10359,10616,10917,11212,11553,11907,12311,12728,13178,13662,14203,14780,15393,16089,16847,17689,18616,19651,20814,22144,23648,25314,27104,28826,30311,31395,32128,32570,32767,32507,31644,30065,27644,24352,20191,15378,10327,5369,866,-3081,-6429,-9206,-11482,-13309,-14740,-15828,-16618,-17146,-17438,-17519,-17409,-17171,-16900,-16603,-16293,-15972,-15648,-15312,-14968,-14640,-14298,-13966,-13635,-13306,-12968,-12647,-12333,-12026,-11712,-11408,-11097,-10797,-10507,-10213,-9932,-9646,-9374,-9098,-8836,-8554,-8304,-8034,-7780,-7523,-7263,-7020,-6775,-6528,-6298,-6048,-5815,-5580,-5364,-5126,-4907,-4686,-4465,-4242,-4017,-3813,-3607,-3379,-3171,-2962,-2774,-2563,-2373,-2160,-1968,-1776,-1582,-1344,-1033,-722,-386,-50,284,644,1028,1435,1865,2291,2762,3252,3758,4301,4878,5503,6147,6801,7491,8161,8796,9365,9831,10178,10427,10582,10661,10593,9991,9221,8243,6993,5352,3092,-289,-6332,-17203,-23626,-26908,-28997,-30417,-31454,-32211,-32767,-32728,-32295,-31768,-31149,-30422,-29593,-28660,-27636,-26544,-25387,-24191,-22986,-21801,-20625,-19487,-18372,-17308,-16277,-15283,-14352,-13439,-12570,-11722,-10946,-10169,-9440,-8737,-8034,-7381,-6755,-6154,-5556,-5008,-4439,-3921,-3405,-2915,-2429,-1969,-1511};
  const int16_t pluckedguitar_waveform [256] = {4379,5456,6533,7556,8613,9687,10684,11639,12542,13355,14079,14714,15240,15684,16021,16288,16470,16594,16656,16667,16610,16480,16257,15938,15516,14963,14262,13402,12338,11058,9517,7760,5770,3681,1561,-389,-2078,-3384,-4387,-5089,-5556,-5796,-5864,-5781,-5428,-4656,-3425,-1708,434,2968,5718,8561,11420,14094,16623,18928,20991,22847,24492,25965,27234,28340,29291,30095,30786,31365,31821,32181,32449,32632,32738,32767,32725,32623,32475,32220,31853,31368,30741,29983,29065,27978,26715,25273,23614,21777,19687,17398,14935,12336,9610,6911,4318,1987,-10,-1564,-2632,-3223,-3400,-3366,-3056,-2243,-327,3758,7687,9999,11480,12523,13284,13833,14249,14534,14752,14884,14954,14971,14916,14743,14431,13943,13274,12329,11127,9623,7814,5797,3789,1847,142,-1348,-2656,-3744,-4693,-5477,-6139,-6713,-7181,-7574,-7896,-8154,-8354,-8500,-8606,-8667,-8690,-8675,-8613,-8488,-8296,-8029,-7643,-7157,-6488,-5600,-4431,-2797,-524,2698,6213,8951,10735,11935,12763,13349,13724,13969,14104,14148,14094,13872,13452,12821,11968,10833,9385,7665,5568,3156,441,-2556,-5709,-8879,-12010,-14965,-17710,-20219,-22400,-24334,-26024,-27477,-28704,-29746,-30590,-31291,-31824,-32233,-32523,-32696,-32767,-32732,-32565,-32250,-31768,-31106,-30227,-29110,-27705,-26021,-23978,-21557,-18757,-15548,-12061,-8411,-4736,-1348,1646,4181,6255,7862,9091,9957,10532,10840,10926,10843,10585,10072,9120,7342,3980,-29,-2585,-4118,-5153,-5838,-6311,-6644,-6858,-6967,-7009,-6972,-6847,-6642,-6341,-5966,-5493,-4956,-4290,-3569,-2766,-1851,-838,282,1496,2850};
  const int16_t piano_waveform [256] = {-4623,-2997,-1405,152,1687,3182,4646,6114,7543,8938,10313,11656,12986,14270,15553,16780,17997,19174,20332,21442,22526,23578,24574,25552,26468,27355,28191,28970,29688,30355,30950,31488,31930,32295,32557,32727,32767,32616,32193,31501,30676,29903,29266,28769,28359,28049,27788,27597,27447,27333,27252,27201,27174,27170,27172,27177,27184,27192,27200,27210,27220,27230,27240,27251,27262,27272,27283,27293,27303,27313,27323,27332,27340,27349,27356,27364,27370,27376,27382,27386,27391,27394,27396,27398,27399,27399,27398,27396,27393,27389,27384,27378,27370,27362,27352,27340,27328,27314,27298,27281,27262,27240,27218,27194,27166,27138,27106,27072,27036,26997,26956,26909,26860,26807,26752,26693,26628,26558,26481,26399,26308,26212,26105,25987,25862,25718,25559,25375,25169,24846,24314,23520,22392,20832,18734,16009,12623,8795,4881,1233,-2011,-4878,-7368,-9526,-11446,-13154,-14657,-16025,-17241,-18333,-19325,-20221,-21043,-21793,-22459,-23075,-23630,-24127,-24581,-24993,-25356,-25692,-25991,-26248,-26481,-26682,-26854,-26999,-27122,-27220,-27297,-27352,-27385,-27400,-27401,-27388,-27364,-27327,-27278,-27219,-27149,-27064,-26974,-26869,-26755,-26632,-26501,-26362,-26209,-26057,-25891,-25728,-25552,-25372,-25199,-25013,-24826,-24638,-24449,-24261,-24083,-23898,-23715,-23536,-23370,-23199,-23043,-22884,-22739,-22602,-22472,-22350,-22237,-22187,-22241,-22409,-22710,-23134,-23706,-24395,-25205,-26079,-27015,-27919,-28767,-29542,-30254,-30855,-31363,-31781,-32124,-32374,-32568,-32690,-32755,-32767,-32627,-32209,-31583,-30781,-29824,-28759,-27593,-26349,-25023,-23605,-22135,-20602,-19021,-17384,-15711,-13977,-12193,-10368,-8510,-6603};
  const int16_t guitar_waveform [256] = {0,3895,7712,11376,14820,17988,20837,23337,25475,27252,28684,29798,30629,31220,31617,31867,32013,32094,32144,32187,32240,32312,32403,32508,32614,32706,32764,32767,32692,32520,32232,31811,31243,30520,29636,28591,27391,26046,24569,22983,21312,19584,17831,16087,14386,12761,11242,9854,8617,7544,6640,5902,5318,4869,4530,4271,4060,3862,3646,3384,3053,2637,2127,1524,836,79,-724,-1548,-2362,-3134,-3832,-4429,-4897,-5215,-5368,-5343,-5138,-4751,-4189,-3461,-2581,-1567,-438,783,2075,3412,4770,6123,7445,8714,9905,10998,11976,12824,13532,14094,14509,14782,14923,14944,14864,14703,14482,14223,13948,13674,13416,13185,12987,12822,12684,12564,12447,12317,12155,11940,11653,11278,10798,10203,9485,8643,7678,6598,5414,4142,2801,1412,0,-1412,-2801,-4142,-5414,-6598,-7678,-8643,-9485,-10203,-10798,-11278,-11653,-11940,-12155,-12317,-12447,-12564,-12684,-12822,-12987,-13185,-13416,-13674,-13948,-14223,-14482,-14703,-14864,-14944,-14923,-14782,-14509,-14094,-13532,-12824,-11976,-10998,-9905,-8714,-7445,-6123,-4770,-3412,-2075,-783,438,1567,2581,3461,4189,4751,5138,5343,5368,5215,4897,4429,3832,3134,2362,1548,724,-79,-836,-1524,-2127,-2637,-3053,-3384,-3646,-3862,-4060,-4271,-4530,-4869,-5318,-5902,-6640,-7544,-8617,-9854,-11242,-12761,-14386,-16087,-17831,-19584,-21312,-22983,-24569,-26046,-27391,-28591,-29636,-30520,-31243,-31811,-32232,-32520,-32692,-32767,-32764,-32706,-32614,-32508,-32403,-32312,-32240,-32187,-32144,-32094,-32013,-31867,-31617,-31220,-30629,-29798,-28684,-27252,-25475,-23337,-20837,-17988,-14820,-11376,-7712,-3895};
  const int16_t horn_waveform [256] = {0,4138,8177,12025,15602,18841,21699,24149,26188,27832,29113,30073,30765,31244,31563,31771,31910,32012,32099,32186,32278,32374,32472,32565,32646,32709,32750,32767,32757,32721,32657,32564,32440,32280,32079,31833,31537,31185,30778,30315,29802,29246,28659,28051,27438,26833,26247,25690,25170,24688,24245,23838,23462,23113,22786,22478,22188,21918,21671,21455,21275,21139,21050,21012,21022,21077,21165,21276,21395,21505,21594,21647,21657,21616,21524,21385,21204,20989,20750,20494,20227,19951,19666,19365,19042,18688,18291,17844,17340,16779,16162,15497,14797,14077,13354,12644,11963,11322,10727,10179,9675,9206,8759,8322,7883,7431,6959,6469,5964,5453,4951,4472,4033,3647,3322,3063,2866,2722,2616,2527,2435,2318,2157,1939,1656,1310,908,465,0,-465,-908,-1310,-1656,-1939,-2157,-2318,-2435,-2527,-2616,-2722,-2866,-3063,-3322,-3647,-4033,-4472,-4951,-5453,-5964,-6469,-6959,-7431,-7883,-8322,-8759,-9206,-9675,-10179,-10727,-11322,-11963,-12644,-13354,-14077,-14797,-15497,-16162,-16779,-17340,-17844,-18291,-18688,-19042,-19365,-19666,-19951,-20227,-20494,-20750,-20989,-21204,-21385,-21524,-21616,-21657,-21647,-21594,-21505,-21395,-21276,-21165,-21077,-21022,-21012,-21050,-21139,-21275,-21455,-21671,-21918,-22188,-22478,-22786,-23113,-23462,-23838,-24245,-24688,-25170,-25690,-26247,-26833,-27438,-28051,-28659,-29246,-29802,-30315,-30778,-31185,-31537,-31833,-32079,-32280,-32440,-32564,-32657,-32721,-32757,-32767,-32750,-32709,-32646,-32565,-32472,-32374,-32278,-32186,-32099,-32012,-31910,-31771,-31563,-31244,-30765,-30073,-29113,-27832,-26188,-24149,-21699,-18841,-15602,-12025,-8177,-4138};
  const int16_t oboe_waveform [256] = {0,4487,8877,13075,16996,20565,23722,26423,28642,30370,31615,32401,32767,32759,32435,31856,31086,30186,29215,28227,27267,26374,25575,24892,24335,23909,23610,23428,23349,23354,23420,23523,23636,23731,23782,23759,23637,23391,22997,22438,21697,20765,19638,18317,16810,15132,13304,11353,9312,7216,5102,3011,981,-952,-2758,-4408,-5882,-7165,-8250,-9136,-9829,-10338,-10680,-10871,-10930,-10877,-10730,-10504,-10214,-9869,-9477,-9042,-8566,-8047,-7485,-6877,-6222,-5518,-4766,-3970,-3133,-2262,-1364,-450,471,1389,2294,3178,4031,4849,5627,6362,7054,7703,8311,8881,9417,9921,10398,10850,11281,11692,12084,12457,12809,13139,13442,13715,13951,14143,14284,14364,14374,14303,14141,13878,13504,13012,12394,11647,10769,9763,8633,7390,6044,4612,3113,1568,0,-1568,-3113,-4612,-6044,-7390,-8633,-9763,-10769,-11647,-12394,-13012,-13504,-13878,-14141,-14303,-14374,-14364,-14284,-14143,-13951,-13715,-13442,-13139,-12809,-12457,-12084,-11692,-11281,-10850,-10398,-9921,-9417,-8881,-8311,-7703,-7054,-6362,-5627,-4849,-4031,-3178,-2294,-1389,-471,450,1364,2262,3133,3970,4766,5518,6222,6877,7485,8047,8566,9042,9477,9869,10214,10504,10730,10877,10930,10871,10680,10338,9829,9136,8250,7165,5882,4408,2758,952,-981,-3011,-5102,-7216,-9312,-11353,-13304,-15132,-16810,-18317,-19638,-20765,-21697,-22438,-22997,-23391,-23637,-23759,-23782,-23731,-23636,-23523,-23420,-23354,-23349,-23428,-23610,-23909,-24335,-24892,-25575,-26374,-27267,-28227,-29215,-30186,-31086,-31856,-32435,-32759,-32767,-32401,-31615,-30370,-28642,-26423,-23722,-20565,-16996,-13075,-8877,-4487};
  const int16_t flute_waveform [256] = {0,2279,4545,6787,8993,11150,13247,15274,17222,19080,20841,22496,24040,25468,26773,27953,29005,29927,30718,31378,31908,32310,32585,32736,32767,32681,32482,32176,31767,31260,30661,29976,29210,28369,27459,26486,25457,24377,23253,22090,20895,19673,18431,17174,15908,14638,13369,12106,10854,9616,8398,7202,6032,4890,3779,2700,1657,648,-322,-1257,-2156,-3017,-3842,-4632,-5387,-6109,-6799,-7457,-8085,-8684,-9255,-9799,-10318,-10811,-11279,-11723,-12142,-12538,-12909,-13256,-13579,-13876,-14149,-14396,-14618,-14813,-14983,-15125,-15242,-15331,-15395,-15432,-15444,-15430,-15391,-15328,-15240,-15129,-14995,-14838,-14658,-14456,-14232,-13985,-13716,-13423,-13108,-12768,-12404,-12016,-11601,-11161,-10694,-10200,-9678,-9130,-8555,-7953,-7325,-6672,-5996,-5298,-4581,-3845,-3095,-2332,-1560,-781,0,781,1560,2332,3095,3845,4581,5298,5996,6672,7325,7953,8555,9130,9678,10200,10694,11161,11601,12016,12404,12768,13108,13423,13716,13985,14232,14456,14658,14838,14995,15129,15240,15328,15391,15430,15444,15432,15395,15331,15242,15125,14983,14813,14618,14396,14149,13876,13579,13256,12909,12538,12142,11723,11279,10811,10318,9799,9255,8684,8085,7457,6799,6109,5387,4632,3842,3017,2156,1257,322,-648,-1657,-2700,-3779,-4890,-6032,-7202,-8398,-9616,-10854,-12106,-13369,-14638,-15908,-17174,-18431,-19673,-20895,-22090,-23253,-24377,-25457,-26486,-27459,-28369,-29210,-29976,-30661,-31260,-31767,-32176,-32482,-32681,-32767,-32736,-32585,-32310,-31908,-31378,-30718,-29927,-29005,-27953,-26773,-25468,-24040,-22496,-20841,-19080,-17222,-15274,-13247,-11150,-8993,-6787,-4545,-2279};
  const int16_t clarinette_waveform [256] = {0,2934,5839,8686,11447,14094,16606,18959,21134,23117,24895,26460,27807,28935,29847,30549,31051,31366,31509,31498,31354,31097,30751,30338,29882,29403,28925,28467,28048,27682,27384,27165,27032,26990,27041,27184,27414,27723,28104,28544,29028,29543,30071,30595,31098,31563,31973,32311,32565,32720,32767,32696,32502,32181,31733,31159,30465,29656,28744,27738,26654,25506,24312,23087,21851,20622,19418,18256,17153,16125,15185,14345,13616,13004,12515,12152,11915,11803,11811,11931,12156,12475,12875,13343,13863,14420,14999,15583,16156,16703,17209,17661,18046,18354,18576,18704,18734,18662,18487,18210,17833,17362,16801,16159,15445,14668,13840,12971,12074,11160,10241,9327,8430,7558,6721,5925,5177,4480,3837,3251,2720,2244,1818,1438,1099,793,514,252,0,-252,-514,-793,-1099,-1438,-1818,-2244,-2720,-3251,-3837,-4480,-5177,-5925,-6721,-7558,-8430,-9327,-10241,-11160,-12074,-12971,-13840,-14668,-15445,-16159,-16801,-17362,-17833,-18210,-18487,-18662,-18734,-18704,-18576,-18354,-18046,-17661,-17209,-16703,-16156,-15583,-14999,-14420,-13863,-13343,-12875,-12475,-12156,-11931,-11811,-11803,-11915,-12152,-12515,-13004,-13616,-14345,-15185,-16125,-17153,-18256,-19418,-20622,-21851,-23087,-24312,-25506,-26654,-27738,-28744,-29656,-30465,-31159,-31733,-32181,-32502,-32696,-32767,-32720,-32565,-32311,-31973,-31563,-31098,-30595,-30071,-29543,-29028,-28544,-28104,-27723,-27414,-27184,-27041,-26990,-27032,-27165,-27384,-27682,-28048,-28467,-28925,-29403,-29882,-30338,-30751,-31097,-31354,-31498,-31509,-31366,-31051,-30549,-29847,-28935,-27807,-26460,-24895,-23117,-21134,-18959,-16606,-14094,-11447,-8686,-5839,-2934};
  const int16_t piano2_waveform [256] = {0,2478,4928,7325,9645,11869,13980,15968,17827,19555,21154,22630,23988,25236,26381,27429,28384,29247,30020,30701,31288,31778,32168,32460,32653,32753,32767,32703,32574,32395,32179,31941,31695,31451,31217,30999,30797,30609,30429,30249,30059,29851,29614,29342,29031,28679,28290,27869,27426,26972,26520,26083,25674,25303,24976,24699,24472,24292,24153,24045,23960,23886,23814,23735,23646,23542,23425,23299,23172,23052,22950,22876,22839,22847,22906,23017,23179,23387,23634,23911,24208,24513,24818,25114,25394,25656,25899,26124,26333,26532,26725,26913,27100,27283,27459,27619,27754,27850,27893,27867,27757,27549,27233,26802,26253,25588,24813,23938,22976,21945,20860,19739,18597,17447,16299,15160,14031,12913,11802,10693,9578,8452,7307,6141,4951,3737,2504,1256,0,-1256,-2504,-3737,-4951,-6141,-7307,-8452,-9578,-10693,-11802,-12913,-14031,-15160,-16299,-17447,-18597,-19739,-20860,-21945,-22976,-23938,-24813,-25588,-26253,-26802,-27233,-27549,-27757,-27867,-27893,-27850,-27754,-27619,-27459,-27283,-27100,-26913,-26725,-26532,-26333,-26124,-25899,-25656,-25394,-25114,-24818,-24513,-24208,-23911,-23634,-23387,-23179,-23017,-22906,-22847,-22839,-22876,-22950,-23052,-23172,-23299,-23425,-23542,-23646,-23735,-23814,-23886,-23960,-24045,-24153,-24292,-24472,-24699,-24976,-25303,-25674,-26083,-26520,-26972,-27426,-27869,-28290,-28679,-29031,-29342,-29614,-29851,-30059,-30249,-30429,-30609,-30797,-30999,-31217,-31451,-31695,-31941,-32179,-32395,-32574,-32703,-32767,-32753,-32653,-32460,-32168,-31778,-31288,-30701,-30020,-29247,-28384,-27429,-26381,-25236,-23988,-22630,-21154,-19555,-17827,-15968,-13980,-11869,-9645,-7325,-4928,-2478};



  bool is_audio_playing() {
    if(volume == 0) {
      return false;
    }

    bool any_channel_playing = false;
    for(int c = 0; c < CHANNEL_COUNT; c++) {
      if(channels[c].volume > 0 && channels[c].adsr_phase != ADSRPhase::OFF) {
        any_channel_playing = true;
      }
    }

    return any_channel_playing;
  }

  int16_t get_audio_frame() {
    int32_t sample = 0;  // used to combine channel output

    for(int c = 0; c < CHANNEL_COUNT; c++) {

      auto &channel = channels[c];

      // increment the waveform position counter. this provides an
      // Q16 fixed point value representing how far through
      // the current waveform we are
      channel.waveform_offset += ((channel.frequency * 256) << 8) / sample_rate;

      if(channel.adsr_phase == ADSRPhase::OFF) {
        continue;
      }

//      if ((channel.adsr_frame >= channel.adsr_end_frame) && (channel.adsr_phase != ADSRPhase::SUSTAIN)) {
      if (channel.adsr_frame >= channel.adsr_end_frame) {
        switch (channel.adsr_phase) {
          case ADSRPhase::ATTACK:
            channel.trigger_decay();
            break;
          case ADSRPhase::DECAY:
            channel.trigger_sustain();
            break;
          case ADSRPhase::SUSTAIN:
            channel.trigger_release();
            break;
          case ADSRPhase::RELEASE:
            channel.off();
            break;
          default:
            break;
        }
      }

      channel.adsr += channel.adsr_step;
      channel.adsr_frame++;

      if(channel.waveform_offset & 0x10000) {
        // if the waveform offset overflows then generate a new
        // random noise sample
        channel.noise = prng_normal();
      }

      channel.waveform_offset &= 0xffff;

      // check if any waveforms are active for this channel
      if(channel.waveforms) {
        uint8_t waveform_count = 0;
        int32_t channel_sample = 0;

        // check if channel frequency is 0; if so, then sample shall be 0
        if (channel.frequency == 0) channel_sample +=0;
        // if channel frequency is not 0, then process sample
        else {

          if(channel.waveforms & Waveform::NOISE) {
            channel_sample += channel.noise;
            waveform_count++;
          }

          if(channel.waveforms & Waveform::SAW) {
            channel_sample += (int32_t)channel.waveform_offset - 0x7fff;
            waveform_count++;
          }

          // creates a triangle wave of ^
          if (channel.waveforms & Waveform::TRIANGLE) {
            if (channel.waveform_offset < 0x7fff) { // initial quarter up slope
              channel_sample += int32_t(channel.waveform_offset * 2) - int32_t(0x7fff);
            }
            else { // final quarter up slope
              channel_sample += int32_t(0x7fff) - ((int32_t(channel.waveform_offset) - int32_t(0x7fff)) * 2);
            }
            waveform_count++;
          }

          if (channel.waveforms & Waveform::SQUARE) {
            channel_sample += (channel.waveform_offset < channel.pulse_width) ? 0x7fff : -0x7fff;
            waveform_count++;
          }

          if(channel.waveforms & Waveform::SINE) {
            // the sine_waveform sample contains 256 samples in
            // total so we'll just use the most significant bits
            // of the current waveform position to index into it
            channel_sample += sine_waveform[channel.waveform_offset >> 8];
            waveform_count++;
          }

          if(channel.waveforms & Waveform::PIANO) {
            // the waveform sample contains 256 samples in
            // total so we'll just use the most significant bits
            // of the current waveform position to index into it
            channel_sample += piano_waveform[channel.waveform_offset >> 8];
            waveform_count++;
          }

          if(channel.waveforms & Waveform::PIANO2) {
            // the waveform sample contains 256 samples in
            // total so we'll just use the most significant bits
            // of the current waveform position to index into it
            channel_sample += piano2_waveform[channel.waveform_offset >> 8];
            waveform_count++;
          }

          if(channel.waveforms & Waveform::REED) {
            // the waveform sample contains 256 samples in
            // total so we'll just use the most significant bits
            // of the current waveform position to index into it
            channel_sample += reed_waveform[channel.waveform_offset >> 8];
            waveform_count++;
          }

          if(channel.waveforms & Waveform::GUITAR) {
            // the waveform sample contains 256 samples in
            // total so we'll just use the most significant bits
            // of the current waveform position to index into it
            channel_sample += guitar_waveform[channel.waveform_offset >> 8];
            waveform_count++;
          }

          if(channel.waveforms & Waveform::PLUCKEDGUITAR) {
            // the waveform sample contains 256 samples in
            // total so we'll just use the most significant bits
            // of the current waveform position to index into it
            channel_sample += pluckedguitar_waveform[channel.waveform_offset >> 8];
            waveform_count++;
          }

          if(channel.waveforms & Waveform::VIOLIN) {
            // the waveform sample contains 256 samples in
            // total so we'll just use the most significant bits
            // of the current waveform position to index into it
            channel_sample += violin_waveform[channel.waveform_offset >> 8];
            waveform_count++;
          }

          if(channel.waveforms & Waveform::HORN) {
            // the waveform sample contains 256 samples in
            // total so we'll just use the most significant bits
            // of the current waveform position to index into it
            channel_sample += horn_waveform[channel.waveform_offset >> 8];
            waveform_count++;
          }

          if(channel.waveforms & Waveform::OBOE) {
            // the waveform sample contains 256 samples in
            // total so we'll just use the most significant bits
            // of the current waveform position to index into it
            channel_sample += oboe_waveform[channel.waveform_offset >> 8];
            waveform_count++;
          }

          if(channel.waveforms & Waveform::CLARINETTE) {
            // the waveform sample contains 256 samples in
            // total so we'll just use the most significant bits
            // of the current waveform position to index into it
            channel_sample += clarinette_waveform[channel.waveform_offset >> 8];
            waveform_count++;
          }

          if(channel.waveforms & Waveform::FLUTE) {
            // the waveform sample contains 256 samples in
            // total so we'll just use the most significant bits
            // of the current waveform position to index into it
            channel_sample += flute_waveform[channel.waveform_offset >> 8];
            waveform_count++;
          }

          if(channel.waveforms & Waveform::WAVE) {

            // fix to allow buffer loading at the first call
            if (channel.wave_buf_pos == 0) {
              if(channel.wave_buffer_callback)
                  channel.wave_buffer_callback(channel);
            }
            channel_sample += channel.wave_buffer[channel.wave_buf_pos];
            if (++channel.wave_buf_pos == 64) {
              channel.wave_buf_pos = 0;
            }

//          channel_sample += channel.wave_buffer[channel.wave_buf_pos];
//          if (++channel.wave_buf_pos == 64) {
//            channel.wave_buf_pos = 0;
//            if(channel.wave_buffer_callback)
//                channel.wave_buffer_callback(channel);
//          }
            waveform_count++;
          }
        }

        channel_sample = channel_sample / waveform_count;

        channel_sample = (int64_t(channel_sample) * int32_t(channel.adsr >> 8)) >> 16;

        // apply channel volume
        channel_sample = (int64_t(channel_sample) * int32_t(channel.volume)) >> 16;

        // apply channel filter
        //if (channel.filter_enable) {
          //float filter_epow = 1 - expf(-(1.0f / 22050.0f) * 2.0f * pi * int32_t(channel.filter_cutoff_frequency));
          //channel_sample += (channel_sample - channel.filter_last_sample) * filter_epow;
        //}

        //channel.filter_last_sample = channel_sample;

        // combine channel sample into the final sample
        sample += channel_sample;
      }
    }

    sample = (int64_t(sample) * int32_t(volume)) >> 16;

    // clip result to 16-bit
    sample = sample <= -0x8000 ? -0x8000 : (sample > 0x7fff ? 0x7fff : sample);
    return sample;
  }
}